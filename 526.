class Solution {
    private int count = 0;
    private boolean[] used;
    private List<Integer>[] candidates;

    public int countArrangement(int N) {
        used = new boolean[N + 1];
        candidates = new List[N + 1];
        for (int i = 1; i <= N; i++) {
            candidates[i] = new ArrayList<>();
            for (int num = 1; num <= N; num++) {
                if (num % i == 0 || i % num == 0) {
                    candidates[i].add(num);
                }
            }
        }
        backtrack(1, N);
        return count;
    }

    private void backtrack(int pos, int N) {
        if (pos > N) {
            count++;
            return;
        }
        for (int num : candidates[pos]) {
            if (!used[num]) {
                used[num] = true;
                backtrack(pos + 1, N);
                used[num] = false;
            }
        }
    }
}
