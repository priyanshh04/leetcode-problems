class Solution {
    private Map<Integer, Integer> freq;
    private int maxFreq;

    public int[] findFrequentTreeSum(TreeNode root) {
        freq = new HashMap<>();
        maxFreq = 0;
        postorder(root);

        List<Integer> res = new ArrayList<>();
        for (int s : freq.keySet()) {
            if (freq.get(s) == maxFreq)
                res.add(s);
        }

        int[] ans = new int[res.size()];
        for (int i = 0; i < res.size(); i++) ans[i] = res.get(i);
        return ans;
    }

    private int postorder(TreeNode node) {
        if (node == null) return 0;
        int sum = node.val + postorder(node.left) + postorder(node.right);
        freq.put(sum, freq.getOrDefault(sum, 0) + 1);
        maxFreq = Math.max(maxFreq, freq.get(sum));
        return sum;
    }
}
