class Solution {
    public int[] searchRange(int[] nums, int target) {
        int left = findBound(nums, target, true);
        if (left == -1) return new int[]{-1, -1}; // target not found
        int right = findBound(nums, target, false);
        return new int[]{left, right};
    }

    // If findFirst is true -> find leftmost index; else find rightmost index.
    private int findBound(int[] nums, int target, boolean findFirst) {
        int lo = 0, hi = nums.length - 1;
        int bound = -1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (nums[mid] == target) {
                bound = mid;
                if (findFirst) {
                    // continue searching left half
                    hi = mid - 1;
                } else {
                    // continue searching right half
                    lo = mid + 1;
                }
            } else if (nums[mid] < target) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return bound;
    }
}
